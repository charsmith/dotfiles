"Charles' somewhat weird vimrc

"*****************************************************************************
"" Vim-PLug core
"*****************************************************************************
if has('vim_starting')
  set nocompatible               " Be iMproved
endif

let vimplug_exists=expand('~/.vim/autoload/plug.vim')

if !filereadable(vimplug_exists)
  if !executable("curl")
    echoerr "You have to install curl or first install vim-plug yourself!"
    execute "q!"
  endif
  echo "Installing Vim-Plug..."
  echo ""
  silent !\curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  let g:not_finish_vimplug = "yes"

  autocmd VimEnter * PlugInstall
endif

" Required:
call plug#begin(expand('~/.vim/plugged'))

"Plugins

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'airblade/vim-gitgutter'
Plug 'lifepillar/vim-solarized8'
Plug 'majutsushi/tagbar'
Plug 'mattn/emmet-vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/syntastic'
Plug 'sjl/gundo.vim'
Plug 'tpope/vim-fugitive'
Plug 'valloric/youcompleteme'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'yggdroot/indentline'

call plug#end()

set title

let mapleader=","

"tabs
"map <leader>n :tabnew<CR>

"swap files all in the same place
"set dir=~/temp
set nobackup
set noswapfile

"omni-completion
filetype on
filetype plugin on
filetype plugin indent on
filetype indent on
set ofu=syntaxcomplete#Complete

"always show the status bar
set laststatus=2

"move on splits
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

"behaviors
set backspace=indent,eol,start
set splitright 			" put split window on the right
"set autochdir
set hlsearch
set incsearch
set autoread
set ruler
set encoding=utf-8

"make searches case insensitive unless they have capitals in them
set ignorecase
set smartcase

"Treat Y as C and D work
map Y y$

"nnoremap <Esc> :noh<CR><Esc>

"select pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

"short messages
set shortmess=atI

"See whitespace
set listchars=tab:>-,trail:.,eol:$,nbsp:.
nmap <silent> <leader>w :set nolist!<CR>

"sudo I forget you
cmap w!! %!sudo tee > /dev/null %

"edit vimrc and reload it
map <leader>e :e! ~/.vimrc<cr>
map <leader>s :source ~/.vimrc<cr>

map <leader>c :let @/ = ""<cr>
"remap tab keys to buffer to remain consistent
"map gt :bn<cr>
"map gT :bp<cr>

set hidden

"reformat lines
map <leader>v 0ma}b:'a,.j<CR>0100 ? <CR>i<CR><Esc>

"autoload vimrc
autocmd BufWritePost $MYVIMRC,~/.dotfiles/vimrc,$MYVIMRC.local nested :source $MYVIMRC

"show syntax highlighting
syntax on

"tabs
set shiftwidth=4
set autoindent
set shiftround
set smartindent
set tabstop=4
set et

set pastetoggle=<F12>


"lines can only be so long for now
"set textwidth=119

"don't beep at me ever
set noerrorbells
set visualbell
set t_vb=

"keep two rows when scrolling
set scrolloff=2

"set t_Co=256
set number

if has('gui_running')
    "columns    width of the display
    set background=dark
endif

"spelling
"map <C-w> <Esc>:setlocal spell spelllang=en_us<CR>
"map <C-z> <Esc>:setlocal nospell<CR>

"perl
autocmd Filetype perl set makeprg=$VIMRUNTIME/tools/efm_perl.pl\ -c\ %\ $*
autocmd Filetype perl set errorformat=%f:%l:%m
"filetype on
"doesn't seem to read tex file properly
autocmd BufNewFile,BufRead *.tex set filetype=tex


set wildignore=*.swp
set wildignore+=*.bak
set wildignore+=*.class
set wildignore+=*.gz
set wildignore+=*.o
set wildignore+=*.obj
set wildignore+=*.pyc
set wildignore+=*.tmp
set wildignore+=*.zip
set wildignore+=.git
set wildignore+=*/build/*
set wildignore+=*/dist/*
set wildignore+=*/target/*

"Plugins

if $TERM == 'xterm'
  set term=xterm-256color
endif
"Solarized
set background=dark
let g:solarized_visibility = "high"
let g:solarized_diffmode = "high"
colorscheme solarized8

"fzf
map <leader>t :FZF -m<CR>

if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
endif

"buffergator
let g:buffergator_suppress_keymaps = 1
map <leader>b :BuffergatorToggle<CR>

"Gundo
map <leader>g :GundoToggle<CR>

"match it
ru macros/matchit.vim

"airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

"syntastic
let g:syntastic_check_on_open=1
let g:syntastic_python_checker = 'pyflakes'

let g:syntastic_mode_map = { 'mode': 'active',
                            \ 'active_filetypes': [],
                            \ 'passive_filetypes': ['html', 'java'] }

augroup filetypedetect
    au BufNewFile,BufRead *.pig  set filetype=pig  syntax=pig
    au BufNewFile,BufRead *.hive set filetype=hive syntax=plsql
augroup END

"Tagbar
nnoremap zg :Tagbar<CR>

if has('macunix')
    let g:ycm_path_to_python_interpreter = "/opt/homebrew/bin/python3.9"
endif


if &term == 'win32'
        let &t_ti.=" \e[1 q"
        let &t_SI.=" \e[5 q-- INSERT --"
        let &t_EI.=" \e[1 q"
        let &t_te.=" \e[0 q"
endif
